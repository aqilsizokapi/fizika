import logging
from email import message

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputFile
from pytube import YouTube
import math


import physics
from physics import topics

TOKEN = ''
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
ADMINS = []


@dp.message_handler(commands='start')
async def start(message: types.Message, physic=None):
    physic_choice = InlineKeyboardMarkup()
    for physic in topics:
        button = InlineKeyboardButton(text=physic, callback_data=physic)
        physic_choice.add(button)
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç –ø—Ä–æ —Ñ—ñ–∑–∏–∫—Éü§ì\n O–±–µ—Ä–∏ —Ç–µ–º—É –∑ —Ñ—ñ–∑–∏–∫–∏,'
                              ' –ø—Ä–æ —è–∫—É —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è',
                         reply_markup=physic_choice)
    await message.answer(text='–æ—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–æ–∫ –∑—ñ —Å–ª–µ—à–∞–º–∏\n'
                              '/start = –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
                              '/calc1 = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —â–æ —Ä–∞—Ö—É—î 2 –∑–∞–∫–æ–Ω –Ω—å—é—Ç–æ–Ω–∞\n'
                              '/calc2 = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —â–æ —Ä–∞—Ö—É—î —Ñ–æ—Ä–º—É–ª—É —Ç–æ–Ω–∫–æ—ó –ª—ñ–Ω–∑–∏\n'
                              '/calc3 = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä  —â–æ —Ä–∞—Ö—É—î –æ–ø—Ç–∏—á–Ω—É —Å–∏–ª—É –ª—ñ–Ω–∑–∏\n'
                              '/calc4 = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —â–æ —Ä–∞—Ö—É—î –∑–∞–∫–æ–Ω –∫—É–ª–æ–Ω–∞')



@dp.callback_query_handler()
async def get_physic_info(callback_query: types.CallbackQuery, physic=None):
    if callback_query.data in topics.keys():
        with open(topics[callback_query.data]['photo'], 'rb') as ph:
            photo = InputFile(ph)
            await bot.send_photo(callback_query.message.chat.id, photo)
        formulas = topics[callback_query.data]['formulas']
        law = topics[callback_query.data]['law']
        video = topics[callback_query.data]['video_lesson']
        message = f"<b>Video lesson :</b> {video} \n\n<b>Forlmula(S):</b> {formulas}\n\n<b>Law:</b> {law}"
        await bot.send_message(callback_query.message.chat.id, message, parse_mode='html')


#–∫–æ–º–∞–Ω–¥–∞ —è–∫–∞ –± —Ä–∞—Ö—É–≤–∞–ª–∞ 2 –∑–∞–∫–æ–Ω –Ω—å—é—Ç–æ–Ω–∞,2 –∑–∞–∫–æ–Ω = F= m*a
m = 0
@dp.message_handler(commands='calc1')
async def add(massage: types.Message, state: FSMContext):
    await massage.answer(text='2 –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞ —Ü–µ F = m * a\n'
                              '—â–æ–± –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–∏–ª—É –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ñ –¥–∞–Ω–Ω—ñ\n'
                              '1.–≤–≤–µ–¥—ñ—Ç—å –º–∞—Å—É: ')
    await state.set_state('sent_masa_of_n')

@dp.message_handler(state='sent_masa_of_n')
async def masa(massage: types.Message, state: FSMContext):
    global m
    if massage.text.isnumeric():
        m = int(massage.text)
        await massage.answer(text='2.–≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: ')
        await state.set_state('sent_a_of_n')
    else:
        await massage.answer(text='–≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ñ –¥–∞–Ω–Ω—ñ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–µ–¥—ñ—Ç—å –¶–ò–§–†–û–í–ï –∑–Ω–∞—á–µ–Ω–Ω—è')

@dp.message_handler(state='sent_a_of_n')
async def masa2(message: types.Message, state: FSMContext):
    global a
    if message.text.isnumeric():
        a = int(message.text)
        f = a * m
        await message.answer(text=f'–≤—ñ–¥–ø–æ–≤—ñ–¥—å: {f}')
        await state.finish()
    else:
        await message.answer(text='–≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ñ –¥–∞–Ω–Ω—ñ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–µ–¥—ñ—Ç—å –¶–ò–§–†–û–í–ï –∑–Ω–∞—á–µ–Ω–Ω—è')

#—Ñ–æ—Ä–º—É–ª–∞ —Ç–æ–Ω–∫–æ—ó –ª—ñ–Ω–∑–∏ 1/F=(1/d)+(1/f)
d = 0
@dp.message_handler(commands='calc2')
async def add(massage: types.Message, state: FSMContext):
    await massage.answer(text='—Ñ–æ—Ä–º—É–ª–∞ —Ç–æ–Ω–∫–æ—ó –ª—ñ–Ω–∑–∏ 1/F = (1/d) + (1/f)\n'
                              '—â–æ–± –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É–ª—É –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ñ –¥–∞–Ω–Ω—ñ\n'
                              '1.–≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ –ª—ñ–Ω–∑–∏ —Ü–µ d: ')
    await state.set_state('sent_d')

@dp.message_handler(state='sent_d')
async def masa(massage: types.Message, state: FSMContext):
    global d
    if massage.text.isnumeric():
        d = int(massage.text)
        await massage.answer(text='2.–≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –ª—ñ–Ω–∑–∏ —Ü–µ f: ')
        await state.set_state('sent_f')
    else:
        await massage.answer(text='–≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ñ –¥–∞–Ω–Ω—ñ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–µ–¥—ñ—Ç—å –¶–ò–§–†–û–í–ï –∑–Ω–∞—á–µ–Ω–Ω—è')

@dp.message_handler(state='sent_f')
async def masa2(message: types.Message, state: FSMContext):
    global f
    if message.text.isnumeric():
        f = int(message.text)
        F=(1/d)+(1/f)
        await message.answer(text=f'–≤—ñ–¥–ø–æ–≤—ñ–¥—å: {F}')
        await state.finish()
    else:
        await message.answer(text='–≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ñ –¥–∞–Ω–Ω—ñ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–µ–¥—ñ—Ç—å –¶–ò–§–†–û–í–ï –∑–Ω–∞—á–µ–Ω–Ω—è')

#–∫–æ–º–∞–Ω–¥–∞ —è–∫–∞ —Ä–∞—Ö—É—î —Ñ–æ—Ä–º—É–ª—É –æ–ø—Ç–∏—á–Ω–æ—ó –ª—ñ–Ω–∑–∏ D = 1/F
q = 0
@dp.message_handler(commands='calc3')
async def add(message: types.Message, state: FSMContext):
    await message.answer(text='—Ñ–æ—Ä–º—É–ª–∞ —Å–∏–ª–∏ –ª—ñ–Ω–∑–∏ D = 1/F\n'
                              '—â–æ–± –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É–ª—É –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ñ –¥–∞–Ω–Ω—ñ\n'
                              '1.–≤–≤–µ–¥—ñ—Ç—å —Ñ–æ–∫—É—Å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –ª—ñ–Ω–∑–∏: ')
    await state.set_state('sent_q')

@dp.message_handler(state='sent_q')
async def masa(message: types.Message, state: FSMContext):
    global q
    if message.text.isnumeric():
        q = int(message.text)
        D = 1/q
        await message.answer(text=f'–≤—ñ–¥–ø–æ–≤—ñ–¥—å: {D}')
        await state.finish()
    else:
        await message.answer(text='–≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ñ –¥–∞–Ω–Ω—ñ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–µ–¥—ñ—Ç—å –¶–ò–§–†–û–í–ï –∑–Ω–∞—á–µ–Ω–Ω—è')

k=0


@dp.message_handler(commands='calc4')
async def add(message: types.Message, state: FSMContext):
    await message.answer(text='—Ñ–æ—Ä–º—É–ª–∞ –∑–∞–∫–æ–Ω–∞ –∫—É–ª–æ–Ω–∞ F = k*|q1|*|q2|/r^2\n'
                              '—â–æ–± –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É–ª—É –≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ñ –¥–∞–Ω–Ω—ñ\n'
                              '1.–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ—Å—Ç—ñ: ')

    await  state.set_state('sent_k')
@dp.message_handler(state='sent_k')
async def masa(message: types.Message, state: FSMContext):
    global k
    if message.text.isnumeric():
        k = int(message.text)
        await message.answer(text='2.–≤–≤–µ–¥—ñ—Ç—å –≤–µ–ª–∏—á–∏–Ω—É –≤–∑–∞—î–º–æ–¥—ñ—é—á–∏—Ö –∑–∞—Ä—è–¥—ñ–≤ q1: ')
        await state.set_state('sent_k2')

q1 = 0
@dp.message_handler(state='sent_k2')
async def masa(message: types.Message, state: FSMContext):
    global q1
    if message.text.isnumeric():
        q1 = int(message.text)
        await message.answer(text='3.–≤–≤–µ–¥—ñ—Ç—å q2: ')
        await state.set_state('sent_k3')
q2 = 0
@dp.message_handler(state='sent_k3')
async def masa(message: types.Message, state: FSMContext):
    global q2
    if message.text.isnumeric():
        q2 = int(message.text)
        await message.answer(text='4.–≤–≤–µ–¥—ñ—Ç—å r: ')
        await state.set_state('sent_r')
r = 0

@dp.message_handler(state='sent_r')
async def masa(message: types.Message, state: FSMContext):
    global r
    if message.text.isnumeric():
        r = int(message.text)
        F = (k*math.fabs(q1)*math.fabs(q2))/r**2
        await message.answer(text=f'–≤—ñ–¥–ø–æ–≤—ñ–¥—å: {F}')
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp)
